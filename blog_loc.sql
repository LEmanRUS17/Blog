-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1:3306
-- Время создания: Апр 24 2021 г., 09:50
-- Версия сервера: 10.3.22-MariaDB
-- Версия PHP: 7.3.17

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `blog.loc`
--

-- --------------------------------------------------------

--
-- Структура таблицы `article`
--

CREATE TABLE `article` (
  `id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `description` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `content` text COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `image` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `viewed` int(11) DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `category_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `article`
--

INSERT INTO `article` (`id`, `title`, `description`, `content`, `date`, `image`, `viewed`, `user_id`, `status`, `category_id`) VALUES
(17, 'Как работать в команде, которая пишет на 5 языках', '<p>Привет, Хабр! Меня зовут Евгений Сальников, я тимлид одной из команд доставки в компании Lamoda. В нашей команде используются сразу пять языков программирования: PHP, Go, Vue, Typescript, Java и Kotlin. Когда я впервые услышал об этом на собеседовании, подумал, что так работать невозможно &mdash; все слишком разное. Но спустя год мое мнение кардинально изменилось, и я нашел много преимуществ в таком подходе.</p>\r\n', '<h2>Почему fullstack?</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Мы часто слышим про fullstack &mdash; это устоявшееся понятие, даже избитое. Оно подразумевает, что один человек может пилить и бекенд, и фронтенд &mdash; все в одном флаконе. Сейчас в нашем направлении уже четыре команды из 27 человек, пять языков и четыре системы.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n	<li><strong>DataMatrix</strong> &mdash; это система для маркировки товаров. В нашей стране существует закон 487-ФЗ, по которому мы обязаны помечать ряд товаров QR-кодом. Маркировка содержит информацию о том, кто произвел этот товар, кто ввез в страну, когда он поступил в продажу. Это помогает понять, насколько легальная вещь лежит перед нами. Подробнее о DataMatrix рассказывали в отдельной <a href=\"https://habr.com/ru/company/lamoda/blog/491828/\">статье</a>.</li>\r\n	<li>Система <strong>Express</strong> стоит в каждом пункте выдачи заказов и во всех транзитных складах. Она целиком написана с нуля внутри Lamoda, поэтому там учтены все наши процессы и потребности. На текущий момент вся система доставки построена на Express.</li>\r\n	<li>Система <strong>XDC </strong>взаимодействует с внешними службами доставки &mdash; с Почтой России, DPD и остальными.</li>\r\n	<li>Также в зоне ответственности нашего направления <strong>мобильное приложение </strong>для торговых представителей, у которых есть планшет или телефон с ПО нашей разработки.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Мы стараемся стандартизировать все системы. Например, если что-то пишем на РНР, то делаем это одинаково: используем одинаковые фреймворки и библиотеки. Но есть задачи, которые нужно решать иными способами. И в таком случае я не разделяю подход, что все можно написать на одном языке программирования. Как правило, это не всегда оправдано и может приводить к неожиданностям. Для разных задач уже существуют готовые наработки или другие технологии. На мой взгляд, это нормально.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Мой любимый пример &mdash; Apache Camel. Это интеграционный фреймворк на Java, который, грубо говоря, &laquo;перекладывает&raquo; данные из одного места в другое. У нас в компании эта технология обеспечивает взаимодействие с внешними курьерскими службами: мы получаем данные о заказе из API, преобразовываем их и отправляем в курьерскую службу. Написать эту задачу на РНР возможно, но будет неоправданно, потому что Apache Camel и так уже создан для этих целей. Такой подход позволяет легче адаптировать новые службы и новые API, тратить меньше времени на преобразование запроса из Json в XML. В Lamoda это адаптированная технология: если одна команда научилась ее &laquo;готовить&raquo;, мы делимся знаниями с коллегами. Сейчас Apache Camel используется уже в четырех командах.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Распределение ролей, покер-планирование и рост экспертизы</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Раньше мне казалось, что существует жесткое разделение по системам. Например, пять человек занимаются одной системой, еще пять занимаются другой и просто взаимодействуют друг с другом. У нас такого нет. Каждый инженер команды может дорабатывать любую систему.</p>\r\n', '2021-04-23 11:35:00', 'f3c46e6631c245fbb59d246a233467f0.jpeg', 16, 1, NULL, 1),
(18, 'Создание вашего первого модуля Ansible', '<p>Конечно, есть документация, доступная и на Ansible.com, но разобраться в ней достаточно трудно. Запуск своего первого модуля на основе этого введения дался мне с большим трудом. Вот почему я создал это пошаговое руководство. Новые пользователи заслуживают лучшей отправной точки.</p>\r\n', '<h3>Что такое модуль Ansible</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Если вы знакомы с Ansible, то, вероятно, знаете, что каждая задача, которую вы выполняете в Ansible, является модулем Ansible. Если нет, то теперь вы это знаете.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Например, посмотрите на следующую задачу Ansible:</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>- name: установить последнюю версию python-requests\r\n  yum:\r\n    name: python-requests\r\n    state: latest</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В данном случае используется модуль Ansible <code>yum</code> для установки определенного пакета.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>По умолчанию у вас уже есть много доступных модулей. В большинстве случаев вы можете использовать стандартные для общих задач.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Однако иногда вам нужно сделать что-то действительно конкретное, и встроенного модуля недостаточно. В этом случае вы можете искать в Интернете настраиваемые модули, например, на веб-сайте Ansible Galaxy, или создать свой собственный модуль Ansible.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В этом блоге мы создадим модуль Ansible, который может взаимодействовать с сервером API для добавления или удаления пользователей. Это простой пример, и, вероятно, вам не нужен специальный модуль, поскольку для него есть модуль по умолчанию, но он помогает объяснить, как работает концепция модуля.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Прежде чем мы создадим наш собственный модуль Ansible, нам сначала потребуется настройка нашей среды разработки.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Настройка нашей среды сборки</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Я использую VSCode для разработки модуля Ansible. Если вы хотите использовать что-то другое, то вам, вероятно, нужно будет сделать некоторые шаги немного по-другому.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Сначала мы создаем репозиторий, который содержит структуру папок для модуля Ansible и сервер API, с которым можно общаться.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Этот серверное API очень простое. На нем мы можем создавать и удалять пользователей &mdash; вот и все. Для целей этого блога этого достаточно.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Итак, давайте загрузим этот репозиторий и откроем его с помощью VSCode.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<pre>\r\n<code>git clone https://gitlab.com/techforce1/ansible-module.git -b blog-setup</code></pre>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Убедитесь, что вы используете ветку <strong>blog-setup</strong>!</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>По завершении вы должны увидеть 3 папки (<code>.devcontainer</code>, <code>ansible</code>, <code>api-server</code>). Сначала нам нужно запустить серверное API. Для этого откройте <code>cmd</code> или другое терминальное приложение, перейдите в папку <code>api-server</code> и выполните <code>docker build -t api-server</code> (не забудьте точку в конце).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Теперь мы можем его запустить. Запустите <code>docker run -it -d -p 5000: 5000 api-server</code>. Это запускает API-сервер. Если вы теперь перейдете по адресу <a href=\"http://localhost:5000\">http://localhost:5000</a>, вы должны увидеть простую веб-страницу.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Единственное, что осталось сделать, прежде чем мы разработаем наш модуль Ansible, &mdash; это настроить VSCode. В скачанном репозитории есть папка .devcontainer. Это специальная папка для VSCode с конфигурацией в ней того, как открыть <code>devcontainer</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>С помощью этого <code>devcontainer</code> вы запускаете свой VSCode внутри <code>devcontainer</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Преимущество этой настройки заключается в том, что вы можете настроить все виды инструментов, которые будут доступны внутри этого <code>devcontainer</code>. В этом случае я добавил Ansible в <code>devcontainer</code>. Таким образом, вам не нужно вручную устанавливать Ansible на локальный компьютер, просто используйте его напрямую из VSCode.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Чтобы открыть VSCode внутри контейнера разработчика, вам нужно щелкнуть значок в левом нижнем углу, а затем щелкнуть <code>Reopen in container</code>.</p>\r\n', '2021-04-23 11:43:00', NULL, 6, 1, NULL, 2),
(19, 'Одномерный генератор случайных действительных чисел', '<p>Генерация непрерывной равномерной случайной величины как оказалась задача не из простых, может потому что сама постановка задачи слегка абсурдна ведь логически получить случайность это значит не найти решения. Однако оставив простейшее &quot;как будет на английском - я не знаю?&quot;, в статьях посвященных алгоритмам вы обнаружите работы по созданию только последовательностей случайных чисел.</p>\r\n', '<p>Класс генераторов &quot;True Random&quot; использует физические явления и внешние связи, так например для генерации десятичного случайного числа вы можете найти рекомендацию использования &quot;атмосферного датчика&quot;. Естественно как любителю программирования такое положение дел мне показалось несправедливым, и довольно долгое время &quot;задача созревала&quot;. Вариант решения, как и следовало ожидать из постановки задачи, появился случайно, как дополнение к задаче компрессии для <a href=\"https://ru.wikipedia.org/wiki/%D0%9F%D0%BB%D0%BE%D1%82%D0%BD%D0%B0%D1%8F_%D1%83%D0%BF%D0%B0%D0%BA%D0%BE%D0%B2%D0%BA%D0%B0_%D1%80%D0%B0%D0%B2%D0%BD%D1%8B%D1%85_%D1%81%D1%84%D0%B5%D1%80\">упаковки твердых сфер</a>. Задача не нашла аналитического решения как и нет пока доказательств его отсутствия, соответственно источник по внешним признакам вполне подходящий.</p>\r\n\r\n<p>Идея не нова, использовалась например в UNIX системах, но с причиной по которой я не могу приведенный алгоритм использовать как функцию столкнулся только при тщательном изучении его работы. Математически обеспечить конечную флуктуацию бесконечного числа параметров невозможно, потому если генератор действительно непрерывный, то в отличие от арифметического количество его значений бесконечно. На практике я не сталкивался со сбоями в его работе, но в сумме это не более чем месяцы работы, хоть &quot;второй закон термодинамики&quot; тоже на моей стороне, но строгой логической надежности он не обеспечивает. Потому на использование алгоритма в качестве функции для систем с высокой надежностью я не претендую, но допускаю что вместе с дополнительными доработками формальную надежность можно существенно повысить.</p>\r\n\r\n<p><strong>Источник непрерывной равномерно распределенной случайной величины</strong> это взаимодействие элемента с границей в модели твердых сфер. Внутренние взаимодействие элементов имеет отличное от равномерного распределение, это было проверено на тестах <a href=\"https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D1%81%D1%82%D1%8B_diehard\">Diehard </a>и потому было исключено из алгоритма, но оставлено в упрощенном виде для дополнительного &quot;перемешивания&quot;.</p>\r\n\r\n<p>Равномерное распределение на поверхности сферы это специальное распределение, и для перехода к плоскому варианту требуется дополнительное преобразование. Это преобразование обнаружил экспериментально, помощи математиков для оформления гипотезы в теорему я не получил, ответы варьировались от &quot;это же очевидно&quot; до &quot;я не занимаюсь этой областью&quot;. Звучит эта гипотеза следующим образом:</p>\r\n\r\n<p><em>Равномерное случайное распределение на поверхности D - мерной сферы без двух произвольно выбранных координат равнозначно равномерному случайному распределению в объеме D-2 мерного шара. </em></p>\r\n', '2021-04-23 11:45:00', 'd7291cc6bf5356cf398dd28de2155199.png', 71, 1, NULL, 3),
(20, 'Мы выяснили, что люди копируют со Stack Overflow и насколько часто', '<p>Говорят, что в каждой шутке есть доля правды. Если говорить о нашем первоапрельском приколе, то в нем эта доля стремилась ко всем ста процентам. Нам захотелось обыграть классический мем о Stack Overflow и немного уклониться от одного из наших фундаментальных принципов. Источником вдохновения послужили попортившие крови основателям компании ресурсы, которые открывают ответы на вопросы по программированию только для платных пользователей. А как бы изменился мир, если бы мы вдруг сделали возможность копировать текст со Stack Overflow доступной только за деньги?</p>\r\n', '<p>Вы не одни такие</p>\r\n\r\n<p><br />\r\nОдин из четверых пользователей, открывающих страницу с вопросом на Stack Overflow, что-нибудь копирует с нее в течение первых пяти минут после захода на сайт. Суммарно мы насчитали 40 623 987 копирований из 7 305 042 постов в период с двадцать шестого марта по девятое апреля. Текст из ответов люди копируют примерно в десять раз чаще, чем из вопросов и где-то в тридцать пять раз чаще, чем из комментариев. Блоки кода подвергаются копированию в десять раз чаще, чем сопровождающий текст, а копирование со страниц вопросов без принятых ответов, на удивление, ведется активнее, чем там, где они есть.<br />\r\n<br />\r\nСоответственно, если вам когда-нибудь было стыдно за то, что вы копируете готовый код, вместо того чтобы писать его с нуля &ndash; пусть ваша совесть будет спокойна! Зачем изобретать велосипед, если кто-то уже разрешил за вас все сложности? Мы называем это многократным использованием &ndash; то, что когда-то узнал, создал, доказал кто-то другой, теперь послужит вам. И в этом нет ничего плохого: так вы можете быстрее учиться, оперативнее получать рабочий код и меньше мотать себе нервы. Весь наш сайт стоит на концепции многократного использования знаний &ndash; сообщество Stack Overflow сильно, прежде всего, своим альтруистичным подходом к наставничеству.<br />\r\n<br />\r\nВполне позволительно залезть на плечи гигантам и позаимствовать уроки, которые они успели усвоить до вас, чтобы создать нечто новое и ценное. При этом, копируя, все-таки стоит придерживаться некоторых проверенных практик, чтобы ненароком не допустить возникновения багов или прорех в безопасности, так что удостоверьтесь, что хорошо во всем разобрались, прежде чем просто схватить кусок и вставить. Ну и само собой, нельзя забывать, что некоторые фрагменты кода можно использовать только с лицензиями. А в остальном мы полностью поддерживаем всех, кто хочет извлечь пользу из наработок, созданных сообществом.<br />\r\n<br />\r\nКак человек, который многие годы без зазрения совести сдирал код со Stack Overflow, я не удивился, когда события копирования стали поступать миллионами. Удивило меня другое: сколько ответов на разные вопросы дала нам эта информация. Сколько людей в реальности копирует контент со Stack Overflow? Копируют один только код или что-то еще? Копируют ли активнее вопросы с принятыми ответами? Чтобы придать своему анализу какое-то направление мы с командой составили список вопросов, которые нас интересовали. Началось всё с простой шутки, а вылилось в серьезное исследование, пролившее свет на многие вещи и давшее толчок многочисленным обсуждениям о развитии и совершенствовании платформы в будущем.<br />\r\n&nbsp;</p>\r\n\r\n<p>Данные</p>\r\n\r\n<p><br />\r\nПри помощи самодельного инструмента для веб-трекинга мы создали кастомные события, чтобы фиксировать каждый случай, когда пользователь что-то копирует с сайта. Благодаря этим событиям нам удалось отследить самые разные характеристики: тэги, тип контента (вопрос, ответ или комментарий, блок кода или обычный текст), репутация копирующего, рейтинг поста, регион, статус поста &ndash; принят или нет. В общем, сохраняли мы практически всё, кроме собственно текста, который копировался.<br />\r\n<br />\r\nДанные мы собирали полные две недели, с двадцать шестого марта по девятое апреля. Все выкладки, которые приводятся ниже, относятся к пользовательскому поведению в этом периоде.<br />\r\n<br />\r\nРезультаты верхнего уровня подтвердили то, что давным-давно звучало в шутках: на Stack Overflow все только и делают, что копируют. Также мы быстро убедились, что копирование как тип поведения подчиняется тем же закономерностям, которые уже выявлены для трафика сайта. Активнее всего люди копируют в будни, в рабочие часы. Регионы, где наш сайт пользуется наивысшей популярностью, дают больше всего копирований: Азия &ndash; 33%, Европа &ndash; 30% и Северная Америка &ndash; 26%. Ну и наконец, 86% копирующих &ndash; анонимные пользователи (то есть у них нулевая репутация). Когда мы стали подробнее вникать, кто копирует и что именно, стало интереснее.<br />\r\n&nbsp;</p>\r\n\r\n<p>Соотносится ли высокая репутация с усиленным копированием?</p>\r\n', '2021-04-23 11:46:00', 'bd32a51fa657e526b937c5e13869844c.png', 4, 1, NULL, 4),
(21, 'Гайд для новичков. Как восстановить данные с iSCSI LUN диска QNAP TS-412', '<p>В этой статье для новичков, мы обсудим как вернуть данные со iSCSI LUN на примере устройства QNAP TS-412. Как восстановить сетевой диск или достать данные с поврежденного сетевого устройства.</p>\r\n', '<p>Хотя протокол iSCSI и является достаточно старым, он не теряет свою популярность в построении сетевых хранилищ. Это протокол для взаимодействия и управления системами хранения между серверами и клиентами.<br />\r\n<br />\r\nДанный протокол используется для передачи данных по сети и позволяет видеть сетевой носитель как локальный физический, в то время как на самом деле хранилище данных находиться на другом устройстве. Такие носители называют LUN-ами.<br />\r\n<br />\r\nLUN &ndash; это номер логического объекта. Другими словами, это сетевой диск или его раздел, который имеет свой номер в сети iSCSI. Данный функционал доступен в Synology, QNAP и других серверных устройствах.<br />\r\n&nbsp;</p>\r\n\r\n<h2>Как восстанавливать?</h2>\r\n\r\n<p><br />\r\nЕсли вы случайно удалили iSCSI LUN, или удалили данные с него, или же просто не можете получить доступ к файлам, хранящимся на вашем NAS, без стороннего софта для восстановления данных вам не обойтись. Программных решений для восстановления данных со iSCSI накопителей немного. Если вам нужна проверенная утилита, которая способна восстановить информацию с таких дисков воспользуйтесь <a href=\"https://hetmanrecovery.com/ru/raid-data-recovery-software\">Hetman RAID Recovery</a>.<br />\r\n<br />\r\nСперва давайте разберем как восстановить утерянный сетевой накопитель.<br />\r\n<br />\r\nПрежде чем приступать к процессу восстановления позаботьтесь о наличии накопителя с объёмом превышающим или равным тому сетевому носителю, с которого будете восстанавливать информацию.<br />\r\n<br />\r\nПодключите носитель к операционной системе Windows, затем скачайте, установите и запустите Hetman RAID Recovery, просканируйте нужный носитель.</p>\r\n', '2021-04-23 11:47:00', 'c050d46917c6f3c40e529180fcbcdeab.jpg', NULL, 1, NULL, 5);

-- --------------------------------------------------------

--
-- Структура таблицы `article_tag`
--

CREATE TABLE `article_tag` (
  `id` int(11) NOT NULL,
  `article_id` int(11) DEFAULT NULL,
  `tag_id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `article_tag`
--

INSERT INTO `article_tag` (`id`, `article_id`, `tag_id`) VALUES
(15, 17, 5),
(16, 17, 6),
(17, 17, 7),
(18, 17, 8),
(19, 17, 9),
(20, 17, 10),
(21, 18, 8),
(22, 18, 9),
(23, 18, 10),
(24, 18, 11),
(25, 19, 3),
(26, 19, 5),
(27, 19, 6),
(28, 20, 4),
(29, 20, 7),
(30, 20, 8),
(31, 20, 9),
(32, 21, 7),
(33, 21, 8),
(34, 21, 9),
(35, 21, 10),
(36, 21, 11);

-- --------------------------------------------------------

--
-- Структура таблицы `category`
--

CREATE TABLE `category` (
  `id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `category`
--

INSERT INTO `category` (`id`, `title`) VALUES
(2, 'Наука и Техника'),
(3, 'Строительство'),
(4, 'Искуство'),
(5, 'Отдых');

-- --------------------------------------------------------

--
-- Структура таблицы `comment`
--

CREATE TABLE `comment` (
  `id` int(11) NOT NULL,
  `text` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `user_id` int(11) DEFAULT NULL,
  `article_id` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `date` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `comment`
--

INSERT INTO `comment` (`id`, `text`, `user_id`, `article_id`, `status`, `date`) VALUES
(4, 'Первый коментарий', 1, 19, 1, '2021-04-23 11:48:00'),
(5, 'Второй коментарий', 1, 19, 1, '2021-04-23 11:49:00'),
(6, 'Test coment', 228624624, 19, 1, '2021-04-23 12:12:00');

-- --------------------------------------------------------

--
-- Структура таблицы `migration`
--

CREATE TABLE `migration` (
  `version` varchar(180) COLLATE utf8mb4_unicode_ci NOT NULL,
  `apply_time` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `migration`
--

INSERT INTO `migration` (`version`, `apply_time`) VALUES
('m000000_000000_base', 1617772892),
('m210406_074250_create_article_table', 1617772895),
('m210406_074314_create_category_table', 1617772895),
('m210406_074328_create_tag_table', 1617772896),
('m210406_074342_create_user_table', 1617772896),
('m210406_074415_create_article_tag_table', 1618215098),
('m210407_052506_create_comment_table', 1617773158),
('m210420_124222_add_date_to_comment', 1618922836);

-- --------------------------------------------------------

--
-- Структура таблицы `tag`
--

CREATE TABLE `tag` (
  `id` int(11) NOT NULL,
  `title` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `tag`
--

INSERT INTO `tag` (`id`, `title`) VALUES
(3, 'Транспорт'),
(4, 'Путишествие'),
(5, 'Покупки'),
(6, 'fullstack development'),
(7, ' go'),
(8, ' php'),
(9, 'vue'),
(10, 'typescript'),
(11, 'kotlin');

-- --------------------------------------------------------

--
-- Структура таблицы `user`
--

CREATE TABLE `user` (
  `id` int(11) NOT NULL,
  `name` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `email` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `isAdmin` int(11) DEFAULT 0,
  `photo` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- Дамп данных таблицы `user`
--

INSERT INTO `user` (`id`, `name`, `email`, `password`, `isAdmin`, `photo`) VALUES
(1, 'admin', 'admin@test.ru', '123', 1, NULL),
(2, 'user', 'userTest@example.ru', '12345', 0, NULL),
(3, 'test', 'test@example.ru', '12345', 0, NULL),
(228624624, 'Дмитрий', NULL, NULL, 0, 'https://sun3-11.userapi.com/s/v1/ig2/yhXGR0feTnh6vO_57a0QGE_0AA_uPISZYm6m0uYcy-KZDQ1UmjPXgGAsm3opPZjjWLhDUwmmU7j0iKX58M0n-X8S.jpg?size=200x0&amp;quality=96&amp;crop=350,9,1899,1899&amp;ava=1');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `article`
--
ALTER TABLE `article`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `article_tag`
--
ALTER TABLE `article_tag`
  ADD PRIMARY KEY (`id`),
  ADD KEY `tag_article_article_id` (`article_id`),
  ADD KEY `idx_tag_id` (`tag_id`);

--
-- Индексы таблицы `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `comment`
--
ALTER TABLE `comment`
  ADD PRIMARY KEY (`id`),
  ADD KEY `idx-post-user_id` (`user_id`),
  ADD KEY `idx-article_id` (`article_id`);

--
-- Индексы таблицы `migration`
--
ALTER TABLE `migration`
  ADD PRIMARY KEY (`version`);

--
-- Индексы таблицы `tag`
--
ALTER TABLE `tag`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `article`
--
ALTER TABLE `article`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT для таблицы `article_tag`
--
ALTER TABLE `article_tag`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=37;

--
-- AUTO_INCREMENT для таблицы `category`
--
ALTER TABLE `category`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;

--
-- AUTO_INCREMENT для таблицы `comment`
--
ALTER TABLE `comment`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- AUTO_INCREMENT для таблицы `tag`
--
ALTER TABLE `tag`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT для таблицы `user`
--
ALTER TABLE `user`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=228624625;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `article_tag`
--
ALTER TABLE `article_tag`
  ADD CONSTRAINT `fk-tag_id` FOREIGN KEY (`tag_id`) REFERENCES `tag` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `tag_article_article_id` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `comment`
--
ALTER TABLE `comment`
  ADD CONSTRAINT `fk-article_id` FOREIGN KEY (`article_id`) REFERENCES `article` (`id`) ON DELETE CASCADE,
  ADD CONSTRAINT `fk-post-user_id` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
